# This is Git's per-user configuration file.
# user {{{
[user]
# Please adapt and uncomment the following lines:
	name = Luca Morelli
	email = luca.morelli.lm@gmail.com
# }}}
# core {{{
[core]
	excludesfile = /Users/morels/.gitignore_global
# }}}
# difftool {{{
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
# }}}
# mergetool {{{
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
# }}}
# commit {{{
[commit]
	template = /Users/luca/.stCommitMsg
# }}}
# credential {{{
[credential]
	helper = cache --timeout 3600
# }}}
# color {{{
[color]
    branch = auto
    diff = auto
    status = auto

[color "branch"]
    current = red reverse
    local = blue
    remote = green

[color "diff"]
    meta = yellow
    frag = magenta
    old = red bold
    new = green
    plain = white

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

# }}}
# push/pull/diff/options {{{
[push]
    default = current
[pull]
    default = current
[diff]
    mnemonicprefix = true
# [branch]
#    autosetuprebase = always
[apply]
    whitespace = nowarn

# }}}
# alias {{{
[alias]
    # basic {{{
    st = status -s
    cl = clone
    ci = commit
    co = checkout
    cob = checkout -b # Fetch from a repository and prune any remote-tracking references that no longer exist on the remote.
    cot = checkout --track # Fetch from a repository keeping remote name, when it does not exist. Use -B otherwise as shown here https://stackoverflow.com/questions/10002239/difference-between-git-checkout-track-origin-branch-and-git-checkout-b-branch
    cou = checkout -u # Fetch from a repository keeping track of remote branch when local branch already exists
    f   = fetch -p
    ft = f --tags
    fat = f --tags --all
    br = branch
    r = reset
    p = push
    pu = pull --no-commit
    puc = pull --commit
    cp = cherry-pick
    gr = grep -Ii
    t = "!f() { git tag "$1" -m \""$1"\"; }; f"
    # }}}
    # tweak defaults {{{
    diff = diff --word-diff
    grep = grep -Ii
    bra = branch -a
    brl = branch --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]' --sort=-committerdate
    brs = ! git branch -al $1
    ai = add --interactive
    # grep on filename
    find = "!git ls-files | grep -i"
    # }}}
    # commit {{{
    cim = commit -m
    cima = commit -a -m
    cia = commit --amend
    amend = commit --amend
    ciaa = commit -a --amend -C HEAD
    hash = rev-parse --short HEAD
    # }}}
    # log commands {{{
    ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    lsa = ls --all
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    lc  = "!f() { git ll "$1"^.."$1"; }; f"
    lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
    fl = log -u
    filelog = log -u
    lgr = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    logadog = log --all --decorate --oneline --graph
    adog = logadog
    logdog = log --all --decorate --oneline --graph
    dog = logdog
    # }}}
    # diff {{{
    d = diff --word-diff
    dc = diff --cached
    # diff last commit
    dls = diff --name-only
    dlc = diff --cached HEAD^
    dr  = "!f() { git diff -w "$1"^.."$1"; }; f"
    diffr  = "!f() { git diff "$1"^.."$1"; }; f"
    # }}}
    # reset commands {{{
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rh = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard
    # }}}
    ## git svn {{{
    # svnr = svn rebase
    # svnd = svn dcommit
    # svnl = svn log --oneline --show-commit
    ## }}}
    # stash {{{
    sl = stash list
    sa = stash apply
    sp = stash push
    sss = "!f() { git stash show $@; }; f"
    ss = sss --word-diff
    # }}}
    # assume aliases {{{
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    # show assumed files
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    # unassume all the assumed files
    unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
    assumeall = "!git status -s | awk {'print $2'} | xargs git assume"
    # }}}
    # subtree {{{
    #   add
    sba = "!f() { git subtree add --prefix $2 $1 master --squash; }; f"
    #   update/pull
    sbu = "!f() { git subtree pull --prefix $2 $1 master --squash; }; f"
    # }}}
    # tag {{{
    #   last tag created
    lasttag = describe --tags --abbrev=0
    lt = describe --tags --abbrev=0
    dt = tag -d
    dtr = push --delete origin
    tp = push --tags origin
    #   list tags created
    lst = "!git tag -l"
    #   reload tags
    tagreload = "!git tag -l | xargs git tag -d && git fetch -t"
    # }}}
    # various useful {{{
    # conflict/merges
    ours = "!f() { git co --ours $@ && git add $@; }; f"
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"

    #list remotes
    rem="!git config -l | grep remote.*url | tail -n +2"

    #apply patch from other local repo
    lap = "!f() { git --git-dir=$1 format-patch -k -1 --stdout $2 | git am -3 -k; }; f"

    #open markdown files edited in last commit
    last = "!vi $(git show HEAD --format="" --name-only | grep -e .*md$ | xargs)"
    #open just created markdown in working directory
    newmd = "!vi $(git status -s | awk {'print $2'})"

    # initial empty commit
    empty = "!git commit -am\"[empty] Initial commit\" --allow-empty"

    # list all aliases
    la = "!git config -l | grep alias | cut -c 7-"
    aliases = la
    # }}}
    # convoluted aliases {{{
    # grep from root folder
    gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
    #rename branch tree to done-
    done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"
    #add bitbucket remote
    ra = "!f() { git remote add $1 https://bitbucket.org/$2.git; }; f"
    # }}}
    # worktree list {{{
    wl = worktree list
    # undo from here http://megakemp.com/2016/08/25/git-undo/
    undo = "!f() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; f"
    # }}}
# }}}